<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/01/hello-world/"/>
    <url>/2021/05/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>channel</title>
    <link href="/2021/03/08/Go/2019-12-27-channel/"/>
    <url>/2021/03/08/Go/2019-12-27-channel/</url>
    
    <content type="html"><![CDATA[<h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><p>go的channel用于多个gorotine传递数据, 是 <strong>Don’t communicat by sharing memory; share memory by communicationg</strong>  的体现.</p><h2 id="channel的使用"><a href="#channel的使用" class="headerlink" title="channel的使用"></a>channel的使用</h2><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h3 id="使用中需要注意的问题"><a href="#使用中需要注意的问题" class="headerlink" title="使用中需要注意的问题"></a>使用中需要注意的问题</h3><h2 id="channel-的实现"><a href="#channel-的实现" class="headerlink" title="channel 的实现"></a>channel 的实现</h2>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>Runtime</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组与slice</title>
    <link href="/2021/03/08/Go/2021-03-08-%E6%95%B0%E7%BB%84%E4%B8%8Eslice/"/>
    <url>/2021/03/08/Go/2021-03-08-%E6%95%B0%E7%BB%84%E4%B8%8Eslice/</url>
    
    <content type="html"><![CDATA[<h1 id="数组与slice"><a href="#数组与slice" class="headerlink" title="数组与slice"></a>数组与slice</h1>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>Runtime</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平均负载</title>
    <link href="/2021/03/08/Linux/2019-04-06-%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD/"/>
    <url>/2021/03/08/Linux/2019-04-06-%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="平均负载"><a href="#平均负载" class="headerlink" title="平均负载"></a>平均负载</h1><p>执行命令 <code>uptime </code> 返回的结果就是系统 一分钟, 五分钟, 十五分钟的平均负载(load averages).  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uptime</span> <br><span class="hljs-attribute">00</span>:<span class="hljs-number">56</span>:<span class="hljs-number">19</span> up  <span class="hljs-number">1</span>:<span class="hljs-number">24</span>,  <span class="hljs-number">2</span> users,  load average: <span class="hljs-number">0</span>.<span class="hljs-number">00</span>, <span class="hljs-number">0</span>.<span class="hljs-number">00</span>, <span class="hljs-number">0</span>.<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h2 id="什么是平均负载"><a href="#什么是平均负载" class="headerlink" title="什么是平均负载"></a>什么是平均负载</h2><p>平均负载的定义:  在单位时间内, 系统处于<strong>可运行状态</strong>和<strong>不可中断状态</strong>的平均进程数, 也就是<strong>平均活跃进程数</strong> </p><ul><li><p>可运行状态 : 真正使用CPU或者正在等待CPU的进程的进程. ps 命令看到的处于R(Runing或Runnable)状态的进程. </p></li><li><p>不可终端状态: 指进程正处于内核关键流程中的进程, 并且这些流程是不可打断的. 比如 等待设备IO相应, 对应于PS命令结果中的D状态(Uninterruptiable Sleep Disk Sleep)的进程</p></li></ul><p>平均负载可以理解为平均活跃经常数. (实际是获取进程数的指数衰减平均值)</p><h2 id="平均负载的分析"><a href="#平均负载的分析" class="headerlink" title="平均负载的分析"></a>平均负载的分析</h2><p>平均负载为平均活跃进程数, 系统最理想的状态为每个CPU上都刚好运行一个进程. 此时 CPU都得到充分利用. </p><p>查看CPU个数命令:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/proc/</span>cpuinfo | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;model name&#x27;</span>| wc -l <br></code></pre></td></tr></table></figure><p><code>uptime</code>命令返回了三个时间的平均负载, 能看出系统中平均负载的趋势. </p><h2 id="平均负载与CPU的使用率"><a href="#平均负载与CPU的使用率" class="headerlink" title="平均负载与CPU的使用率"></a>平均负载与CPU的使用率</h2><p>平均负载不经包含<strong>正在使用CPU的进程</strong>, 还包括 <strong>等待CPU和等待I/O</strong>的进程</p><p>平均负载升高的原因:</p><ul><li>CPU密集型进程. 使用大量的CPU使用平均负载升高. </li><li>I/O密集型应用. 等待I/O导致平均负载升高 </li><li>大量等待CPU的进程调度会导致平均负载升高</li></ul><h2 id="平均负载案例"><a href="#平均负载案例" class="headerlink" title="平均负载案例"></a>平均负载案例</h2><h3 id="CPU密集型进程"><a href="#CPU密集型进程" class="headerlink" title="CPU密集型进程"></a>CPU密集型进程</h3><ol><li><p>使用<code>stress</code> 命令模拟CPU使用率100% </p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">stress</span> --cpu <span class="hljs-number">1</span> --timeout <span class="hljs-number">600</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>uptime </code>查看平均负载的变化情况</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">watch</span> -d uptime <br><span class="hljs-attribute">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">17</span> up <span class="hljs-number">2</span> days, <span class="hljs-number">33</span> min,  <span class="hljs-number">4</span> users,  load average: <span class="hljs-number">7</span>.<span class="hljs-number">30</span>, <span class="hljs-number">2</span>.<span class="hljs-number">97</span>, <span class="hljs-number">2</span>.<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>mpstat</code>查看CPU使用率变化情况</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mpstat</span> -P <span class="hljs-literal">ALL</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">Linux</span> <span class="hljs-number">4</span>.<span class="hljs-number">15</span>.<span class="hljs-number">0</span>-<span class="hljs-number">47</span>-generic  <span class="hljs-number">2019</span>年<span class="hljs-number">04</span>月<span class="hljs-number">06</span>日 _x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>_(<span class="hljs-number">12</span> CPU)<br><span class="hljs-attribute">00</span>时<span class="hljs-number">06</span>分<span class="hljs-number">14</span>秒  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle<br><span class="hljs-attribute">00</span>时<span class="hljs-number">06</span>分<span class="hljs-number">19</span>秒  <span class="hljs-literal">all</span>   <span class="hljs-number">83</span>.<span class="hljs-number">31</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">08</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">16</span>.<span class="hljs-number">60</span><br><span class="hljs-attribute">00</span>时<span class="hljs-number">06</span>分<span class="hljs-number">19</span>秒    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">59</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">99</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">98</span>.<span class="hljs-number">42</span><br><span class="hljs-attribute">00</span>时<span class="hljs-number">06</span>分<span class="hljs-number">19</span>秒    <span class="hljs-number">1</span>  <span class="hljs-number">100</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">00</span>时<span class="hljs-number">06</span>分<span class="hljs-number">19</span>秒    <span class="hljs-number">2</span>  <span class="hljs-number">100</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span><br><br></code></pre></td></tr></table></figure><p> 从结果中可以开出 CPU使用率为100% 而 iowait只有0 . 说明平均负载的升高是由于CPU使用升高导致的. </p></li><li><p>使用 <code>pidstat</code>查看是哪个进程导致CPU使用率为100 </p> <figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-comment"># 间隔 5 秒后输出一组数据</span><br>ipdstat -u<span class="hljs-number"> 5 </span>1 <br>(base) root@jack-pc:~<span class="hljs-comment"># pidstat -u 5 1</span><br>Linux 4.15.0-47-generic (jack-pc) 2019年04月06日 _x86_64_(12 CPU)<br><br>00时11分32秒   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command<br>00时11分37秒 <span class="hljs-number"> 1000 </span>    <span class="hljs-number"> 1455 </span>   0.00    0.40    0.00    0.00    0.40    <span class="hljs-number"> 5 </span> gnome-shell<br>00时11分37秒    <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 19374 </span>   0.20    0.00    0.00    0.00    0.20    <span class="hljs-number"> 3 </span> kworker/3:5<br>00时11分37秒    <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 21640 </span> 100.00    0.00    0.00    0.00  100.00    <span class="hljs-number"> 0 </span> stress<br>00时11分37秒    <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 21641 </span> 100.00    0.00    0.00    0.20  100.00   <span class="hljs-number"> 11 </span> stress<br>00时11分37秒    <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 21642 </span> 100.00    0.00    0.00    0.00  100.00    <span class="hljs-number"> 9 </span> stress<br>00时11分37秒    <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 21643 </span> 100.00    0.00    0.00    0.00  100.00    <span class="hljs-number"> 4 </span> stress<br>00时11分37秒    <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 21644 </span> 100.00    0.00    0.00    0.20  100.00    <span class="hljs-number"> 3 </span> stress<br></code></pre></td></tr></table></figure><p> 从结果中可以看出是stress进程CPU使用率为100%</p></li></ol><h3 id="I-O密集型进程"><a href="#I-O密集型进程" class="headerlink" title="I/O密集型进程"></a>I/O密集型进程</h3><ol><li><p>使用 stress 命令模拟I/O 压力. (不停的执行sync)</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">stress</span> -i <span class="hljs-number">1</span> --timeout <span class="hljs-number">600</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>watch -d uptime</code>查看平均负载情况 </p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span> up <span class="hljs-number">2</span> days, <span class="hljs-number">44</span> min,  <span class="hljs-number">4</span> users,  load average: <span class="hljs-number">0</span>.<span class="hljs-number">73</span>, <span class="hljs-number">4</span>.<span class="hljs-number">61</span>, <span class="hljs-number">4</span>.<span class="hljs-number">43</span><br></code></pre></td></tr></table></figure></li><li><p>使用 <code>mpstat</code> 查看CPU使用率变化情况</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 显示所有 CPU 的指标，并在间隔 5 秒输出一组数据</span><br><span class="hljs-attribute">mpstat</span> -P <span class="hljs-literal">ALL</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">Linux</span> <span class="hljs-number">4</span>.<span class="hljs-number">17</span>.<span class="hljs-number">5</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.elrepo.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span> (izhp<span class="hljs-number">3</span>cgtz<span class="hljs-number">8</span>vqmpabdl<span class="hljs-number">2</span>ux<span class="hljs-number">9</span>z) <span class="hljs-number">2019</span>年<span class="hljs-number">04</span>月<span class="hljs-number">06</span>日 _x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>_(<span class="hljs-number">1</span> CPU)<br><br><span class="hljs-attribute">00</span>时<span class="hljs-number">22</span>分<span class="hljs-number">00</span>秒  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle<br><span class="hljs-attribute">00</span>时<span class="hljs-number">22</span>分<span class="hljs-number">05</span>秒  <span class="hljs-literal">all</span>    <span class="hljs-number">1</span>.<span class="hljs-number">47</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">30</span>.<span class="hljs-number">74</span>   <span class="hljs-number">67</span>.<span class="hljs-number">79</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">00</span>时<span class="hljs-number">22</span>分<span class="hljs-number">05</span>秒    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>.<span class="hljs-number">47</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">30</span>.<span class="hljs-number">74</span>   <span class="hljs-number">67</span>.<span class="hljs-number">79</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p> 从结果中可以看出是平均负载的升高是由于iowait的升高导致的. </p></li><li><p>使用pidstat定位iowait高的进程</p> <figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">pidstat -u<span class="hljs-number"> 5 </span>1 <br>平均时间:   UID       PID    %usr %system  %guest    %CPU   CPU  Command<br>平均时间:    <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 292 </span>   0.00    9.68    0.00    9.68     -  kworker/0:1H<br>平均时间:    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 1104 </span>   0.65   23.01    0.00   23.66     -  stress<br>平均时间:    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 1350 </span>   0.22    0.00    0.00    0.22     -  AliYunDun<br>平均时间:    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 2150 </span>   0.22    0.00    0.00    0.22     -  java<br>平均时间:  <span class="hljs-number"> 997 </span>   <span class="hljs-number"> 10350 </span>   0.00    0.22    0.00    0.22     -  redis-server<br>平均时间:    <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 24215 </span>   0.00    0.22    0.00    0.22     -  kworker/u2:1<br></code></pre></td></tr></table></figure></li></ol><h3 id="大量进程"><a href="#大量进程" class="headerlink" title="大量进程"></a>大量进程</h3><ol><li><p>使用stress模拟8个进程</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">stress -c <span class="hljs-number">8</span> <span class="hljs-comment">--timeout </span><br></code></pre></td></tr></table></figure></li><li><p>使用 stress查看平均负载 </p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">very</span> <span class="hljs-number">2</span>.<span class="hljs-number">0</span>s: uptime                                                                                   Sat Apr  <span class="hljs-number">6</span> <span class="hljs-number">00</span>:<span class="hljs-number">29</span>:<span class="hljs-number">44</span> <span class="hljs-number">2019</span><br><br> <span class="hljs-attribute">00</span>:<span class="hljs-number">29</span>:<span class="hljs-number">44</span> up <span class="hljs-number">192</span> days, <span class="hljs-number">14</span>:<span class="hljs-number">00</span>,  <span class="hljs-number">3</span> users,  load average: <span class="hljs-number">5</span>.<span class="hljs-number">02</span>, <span class="hljs-number">2</span>.<span class="hljs-number">26</span>, <span class="hljs-number">1</span>.<span class="hljs-number">88</span><br><br></code></pre></td></tr></table></figure><p> 平均负载明细升高 .</p></li><li><p>使用pidstat查看进程的情况</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pidstat</span> -u <span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">Linux</span> <span class="hljs-number">4</span>.<span class="hljs-number">15</span>.<span class="hljs-number">0</span>-<span class="hljs-number">47</span>-generic (jack-pc) <span class="hljs-number">2019</span>年<span class="hljs-number">04</span>月<span class="hljs-number">06</span>日 _x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>_(<span class="hljs-number">12</span> CPU)<br><br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">24</span>秒   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>       <span class="hljs-number">968</span>    <span class="hljs-number">0</span>.<span class="hljs-number">20</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">20</span>     <span class="hljs-number">2</span>  accounts-daemon<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒  <span class="hljs-number">1000</span>      <span class="hljs-number">1455</span>    <span class="hljs-number">0</span>.<span class="hljs-number">40</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">40</span>     <span class="hljs-number">2</span>  gnome-shell<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>      <span class="hljs-number">5570</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">20</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">20</span>    <span class="hljs-number">10</span>  kworker/<span class="hljs-number">10</span>:<span class="hljs-number">2</span><br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">18806</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">20</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">20</span>     <span class="hljs-number">4</span>  kworker/<span class="hljs-number">4</span>:<span class="hljs-number">1</span><br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23573</span>   <span class="hljs-number">21</span>.<span class="hljs-number">76</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">78</span>.<span class="hljs-number">24</span>   <span class="hljs-number">21</span>.<span class="hljs-number">76</span>     <span class="hljs-number">9</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23574</span>   <span class="hljs-number">29</span>.<span class="hljs-number">54</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">70</span>.<span class="hljs-number">46</span>   <span class="hljs-number">29</span>.<span class="hljs-number">54</span>     <span class="hljs-number">2</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23575</span>   <span class="hljs-number">23</span>.<span class="hljs-number">95</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">76</span>.<span class="hljs-number">05</span>   <span class="hljs-number">23</span>.<span class="hljs-number">95</span>     <span class="hljs-number">7</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23576</span>   <span class="hljs-number">21</span>.<span class="hljs-number">96</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">77</span>.<span class="hljs-number">64</span>   <span class="hljs-number">21</span>.<span class="hljs-number">96</span>    <span class="hljs-number">10</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23577</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">78</span>.<span class="hljs-number">04</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>    <span class="hljs-number">11</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23578</span>   <span class="hljs-number">25</span>.<span class="hljs-number">55</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">74</span>.<span class="hljs-number">85</span>   <span class="hljs-number">25</span>.<span class="hljs-number">55</span>     <span class="hljs-number">0</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23579</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">77</span>.<span class="hljs-number">84</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>     <span class="hljs-number">9</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23580</span>   <span class="hljs-number">22</span>.<span class="hljs-number">75</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">77</span>.<span class="hljs-number">45</span>   <span class="hljs-number">22</span>.<span class="hljs-number">75</span>    <span class="hljs-number">11</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23581</span>   <span class="hljs-number">23</span>.<span class="hljs-number">35</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">77</span>.<span class="hljs-number">05</span>   <span class="hljs-number">23</span>.<span class="hljs-number">35</span>     <span class="hljs-number">1</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23582</span>   <span class="hljs-number">27</span>.<span class="hljs-number">74</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">72</span>.<span class="hljs-number">26</span>   <span class="hljs-number">27</span>.<span class="hljs-number">74</span>     <span class="hljs-number">3</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23583</span>   <span class="hljs-number">23</span>.<span class="hljs-number">75</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">76</span>.<span class="hljs-number">45</span>   <span class="hljs-number">23</span>.<span class="hljs-number">75</span>     <span class="hljs-number">7</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23584</span>   <span class="hljs-number">22</span>.<span class="hljs-number">36</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">77</span>.<span class="hljs-number">45</span>   <span class="hljs-number">22</span>.<span class="hljs-number">36</span>     <span class="hljs-number">8</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23585</span>   <span class="hljs-number">27</span>.<span class="hljs-number">15</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">73</span>.<span class="hljs-number">05</span>   <span class="hljs-number">27</span>.<span class="hljs-number">15</span>     <span class="hljs-number">7</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23586</span>   <span class="hljs-number">22</span>.<span class="hljs-number">36</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">77</span>.<span class="hljs-number">45</span>   <span class="hljs-number">22</span>.<span class="hljs-number">36</span>     <span class="hljs-number">8</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23587</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">78</span>.<span class="hljs-number">04</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>     <span class="hljs-number">8</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23588</span>   <span class="hljs-number">24</span>.<span class="hljs-number">35</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">75</span>.<span class="hljs-number">45</span>   <span class="hljs-number">24</span>.<span class="hljs-number">35</span>     <span class="hljs-number">1</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23589</span>   <span class="hljs-number">22</span>.<span class="hljs-number">55</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">77</span>.<span class="hljs-number">64</span>   <span class="hljs-number">22</span>.<span class="hljs-number">55</span>    <span class="hljs-number">10</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23590</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">78</span>.<span class="hljs-number">04</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>     <span class="hljs-number">9</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23591</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">77</span>.<span class="hljs-number">64</span>   <span class="hljs-number">22</span>.<span class="hljs-number">16</span>    <span class="hljs-number">10</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23592</span>   <span class="hljs-number">24</span>.<span class="hljs-number">75</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">75</span>.<span class="hljs-number">45</span>   <span class="hljs-number">24</span>.<span class="hljs-number">75</span>     <span class="hljs-number">1</span>  stress<br><span class="hljs-attribute">00</span>时<span class="hljs-number">35</span>分<span class="hljs-number">29</span>秒     <span class="hljs-number">0</span>     <span class="hljs-number">23593</span>   <span class="hljs-number">21</span>.<span class="hljs-number">36</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">78</span>.<span class="hljs-number">64</span>   <span class="hljs-number">21</span>.<span class="hljs-number">36</span>     <span class="hljs-number">9</span>  stress<br></code></pre></td></tr></table></figure><p> 可以看出是由于进程等待CPU导致平均负载升高</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPU上下文切换</title>
    <link href="/2021/03/08/Linux/2019-04-07-CPU%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
    <url>/2021/03/08/Linux/2019-04-07-CPU%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="CPU上下文切换"><a href="#CPU上下文切换" class="headerlink" title="CPU上下文切换 ?"></a>CPU上下文切换 ?</h1><p>多个进程竞争CPU可以导致平均负载(Load Average) 升高, 竞争CPU的时候没有真正的运行,在竞争过程发生的<strong>CPU上下文切换</strong>导致的. </p><h3 id="为什么会存在CPU上下文切换"><a href="#为什么会存在CPU上下文切换" class="headerlink" title="为什么会存在CPU上下文切换 ?"></a>为什么会存在CPU上下文切换 ?</h3><p>Linux系统为多任务系统, 但是CPU在执行任务时,某个时刻只能执行一个任务. 所以操作系统将CPU轮流执行多个任务,执行的任务在CPU快速的切换造成同时执行多个任务的假象. 在切换任务后,执行任务前,CPU需要知道执行任务的从哪里加载, 从哪里开始运行, 所以需要 系统提前设置好<strong>CPU寄存器和程序计数器(Program Counter, PC)</strong> </p><ul><li>CPU寄存器: CPU内置的小容量但是速度极快的内存</li><li>程序计数器 : 用来存储CPU正在执行的CPU指令的位置, 或者下一条指令的位置. </li></ul><p>它们是CPU执行任务的必须的依赖环境, 叫做<strong>CPU的上下文</strong>. </p><p><img src="../../image/Linux/image-20181202122328329.png" alt="CPU上下文切换"></p><h2 id="什么是CPU上下文切换"><a href="#什么是CPU上下文切换" class="headerlink" title="什么是CPU上下文切换"></a>什么是CPU上下文切换</h2><p>把前一个任务的CPU上下文保存起来,然后加载下一个任务的上下文. 保存下的CPU上下文会存储在内核中, 并在任务从新被执行时再次加载.  </p><p>根据任务的不同 CPU上下文切换可以分为: </p><ul><li>进程上下文切换</li><li>线程上下文切换</li><li>中断上下文切换</li></ul><h2 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h2><h3 id="进程内的CPU上下文切换"><a href="#进程内的CPU上下文切换" class="headerlink" title="进程内的CPU上下文切换"></a>进程内的CPU上下文切换</h3><p>Linux系统根据特权等级把进程的运行空间分为内核空间</p><p><img src="../../image/Linux/%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8C%E7%A9%BA%E9%97%B4.png" alt="进程执行空间"></p><ul><li>内核空间(Ring0) 具有最高权限, 可以访问任何资源</li><li>用户空间(Ring3) 只能访问受限资源. 只有通过<strong>系统调用</strong>来访问特权资源. </li></ul><p>进程既可以在用户空间运行,也可以在内核空间运行. 进程通过<strong>系统调用</strong>来从用户空间到内核空间. 例如 读取文件 .系统调用过程会发生CPU上下文切换,执行流程</p><ol><li>保存CPU寄存器中用户态的指令位置,</li><li>将CPU寄存器更新为需要执行的内核态的指令的位置</li><li>跳转到内核态运行内核任务 </li></ol><p>在系统调用结束后, CPU寄存器需要恢复到原来保存用户态的位置, 然后切换到用户空间,继续执行进程.  所以一次系统调用发生了两次CPU上下文切换. </p><h3 id="进程间的上下文切换"><a href="#进程间的上下文切换" class="headerlink" title="进程间的上下文切换"></a>进程间的上下文切换</h3><p>进程是由内核来管理和调度的, 所以进程的切换只能发生在内核态, 进程的上下文不仅包含虚拟内存, 全局变量, 等用户空间资源, 还包含内核堆栈,寄存器等内存空间的状态. </p><p>因此, 在进程的上下文切换时比系统调用还多了一步: 保存当前进程的内核状态和CPU寄存器之前,先把进程的虚拟内存,栈等保存下来, 在加载了下一进程的内核态后 还需要刷新进程的虚拟内存和用户栈 .</p><p>如下图所示:</p><p><img src="../../image/Linux/CPU%E8%BF%9B%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.png" alt="CPU进程上下文切换"></p><p>保存和恢复上下文的过程需要在内核CPU上运行才能完成,每次上下文切换需要几十纳秒到到数微秒的CPU时间. 在进程上下文切换次数较多时 容易导致CPU将大量的时间耗费在寄存器,内核栈,以及虚拟内存等资源的保存和恢复上. </p><p>Linux系统是通过<strong>TLB(Translation Lookaside Buffer)</strong> 来管理虚拟内存到屋里内存的映射关系. 当虚拟内存更新后TLB也需要刷新, 导致内存访问变慢. 在多CPU系统上 缓存是多个处理器共享的, 刷新缓存不仅会影响当前处理器的进程, 还会影响共享缓存的其他的处理的进程. </p><p><strong>什么时候会进行进程上下文切换?</strong></p><p>Linux系统为每个CPU都维护了一个<strong>就绪队列</strong>,  将活跃的进程(处于正在运行和等待CPU的进程) 安装优先级和等待CPU的时间排序, 然后选择最需要CPU的进程(优先级最高和等待CPU时间最长的进程)来运行.  </p><blockquote><p>为了保证所有的进程得到公平的调度, CPU时间将划分为一段段的时间片. 这些时间片,在轮流分配给各个进程. </p></blockquote><p> <strong>进程什么时候会被调度到CPU上运行?</strong></p><ol><li>当某个进程的CPU的时间片耗尽了,就会被系统挂起,切换到其他正在等待CPU的进程运行 </li><li>当进程的系统资源不足(例如内存不足)时, 需要等到资源满足后才能运行, 这个时候进程会被挂起, 并由系统调度气筒进程运行. </li><li>将进程调用<code>sleep</code>函数将自己主动挂起时. </li><li>当有优先级更高的优先级程序运行时, 为了保证高优先级进程运行, 当前进程回会被挂起, 运行高优先级进程. </li><li>发生硬件中断是, CPU上的进程会被挂起,先执行内核的中断服务程序. </li></ol><h2 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h2><p>线程和进程的区别: </p><ul><li><p><strong>线程是调度的基本单位</strong></p></li><li><p><strong>进程是资源拥有的基本单位</strong></p></li></ul><p>内存中的任务调度,调度的对象是线程, 进程只是给线程提供虚拟内存, 全局变量等资源. </p><p>线程的上下文切换的两种情况:</p><ol><li>前后两个线程, 属于不同进程.  因此资源不共享, 所有切换过程和进程上下文切换相同</li><li>前后两个线程属于同一个进程, 此时 虚拟机内存是共享的, 所以在切换时, 虚拟内存资源保持, 只需要切换线程的私有数据, 寄存器,等不共享的数据. </li></ol><p>进程内的线程的上下文切换比进程间的切换消耗更少的资源, 这是多线程代替多进程的一个优势. </p><h2 id="中断上下文切换"><a href="#中断上下文切换" class="headerlink" title="中断上下文切换"></a>中断上下文切换</h2><p>为了响应硬件的事件, 中断处理会打断当前进程的正常调度和执行, 转而调用中断处理程序, 响应设备事件.  </p><p>而打断其他的进程时, 就需要将进程的状态保存下来, 中断结束后进程仍然可以从原来的状态恢复运行.</p><p>和进程上下文切换不同的的是中断上下文切换不涉及进程的用户态, 所以中断过程打断了一个正处于用户态的进程, 也不需要保存和恢复这个进程的虚拟内存. 全局变量等用户资源. 中断上下文 只包含内核态服务程序执行所需要的必须的状态, 包括CPU寄存器. 内核堆栈, 硬件中断参数等.</p><p><strong>对应CPU 中断处理比进程执行拥有更高的优先级</strong>, 所有中断上下文切换不会与进程上下文切换同时发生.  中断会打断正常执行的进程, 所以大部分中断程序都短小精悍, 以便尽可能快的执行结束. </p><p>中断的上下文切换也需要消耗CPU, 切换次数过多也会消耗大量的CPU. </p><hr><h2 id="怎样查看上下文切换情况"><a href="#怎样查看上下文切换情况" class="headerlink" title="怎样查看上下文切换情况"></a>怎样查看上下文切换情况</h2><h3 id="使用vmstat查看系统进程上下文切换情况"><a href="#使用vmstat查看系统进程上下文切换情况" class="headerlink" title="使用vmstat查看系统进程上下文切换情况"></a>使用vmstat查看系统进程上下文切换情况</h3><p>vmstat是一个常用的性能分析工具, 主要用来分析<strong>系统的内存使用情况</strong>,也常用来分析CPU上下文切换和中断次数. </p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">#</span> <span class="hljs-comment">每隔5秒输出一组数据</span><br><span class="hljs-comment">~#</span> <span class="hljs-comment">vmstat</span> <span class="hljs-comment">5</span><br><span class="hljs-comment">procs</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">memory</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span> --<span class="hljs-literal">-</span><span class="hljs-comment">swap</span>-- --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">io</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-literal">-</span><span class="hljs-comment">system</span>-- --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">cpu</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><br> <span class="hljs-comment">r</span>  <span class="hljs-comment">b</span>   <span class="hljs-comment">swpd</span>   <span class="hljs-comment">free</span>   <span class="hljs-comment">buff</span>  <span class="hljs-comment">cache</span>   <span class="hljs-comment">si</span>   <span class="hljs-comment">so</span>    <span class="hljs-comment">bi</span>    <span class="hljs-comment">bo</span>   <span class="hljs-comment">in</span>   <span class="hljs-comment">cs</span> <span class="hljs-comment">us</span> <span class="hljs-comment">sy</span> <span class="hljs-comment">id</span> <span class="hljs-comment">wa</span> <span class="hljs-comment">st</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span> <span class="hljs-comment">0</span>  <span class="hljs-comment">0</span>      <span class="hljs-comment">0</span> <span class="hljs-comment">6306876</span>  <span class="hljs-comment">73684</span> <span class="hljs-comment">801032</span>    <span class="hljs-comment">0</span>    <span class="hljs-comment">0</span>   <span class="hljs-comment">227</span>     <span class="hljs-comment">5</span>   <span class="hljs-comment">51</span>   <span class="hljs-comment">94</span>  <span class="hljs-comment">1</span>  <span class="hljs-comment">0</span> <span class="hljs-comment">99</span>  <span class="hljs-comment">0</span>  <span class="hljs-comment">0</span><br><span class="hljs-comment"></span> <br></code></pre></td></tr></table></figure><p>需要特别关注的四列内容:</p><ul><li>cs(context switch) 每秒上下文切换次数</li><li>in(interrupt) 每秒中断次数</li><li>r(Running or Rannale) 就绪队列的长度,(正在运行和等待CPU的进程数)</li><li>b(Blocked) 处于不可中断睡眠状态的进程数</li></ul><h3 id="使用pidstat查看进程的上下文切换情况"><a href="#使用pidstat查看进程的上下文切换情况" class="headerlink" title="使用pidstat查看进程的上下文切换情况"></a>使用pidstat查看进程的上下文切换情况</h3><p>vmstat只能给出系统的上下文切换情况, 如果需要查看每个进程的上下文切换情况,需要使用pidstat. </p><p>加上w选项就可以查看每个进程的上下文切换情况.</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ pidstat -w 5<br>Linux 4.15.0-47-generic (jack-pc) 2019年04月11日 _x86_64_(12 CPU)<br><br>23时28分16秒   UID       PID   cswch/s nvcswch/s  Command<br>23时28分21秒    <span class="hljs-number"> 0 </span>       <span class="hljs-number"> 8 </span>     5.59      0.00  rcu_sched<br>23时28分21秒    <span class="hljs-number"> 0 </span>      <span class="hljs-number"> 11 </span>     0.20      0.00  watchdog/0<br>23时28分21秒    <span class="hljs-number"> 0 </span>      <span class="hljs-number"> 14 </span>     0.20      0.00  watchdog/1<br>...<br><br></code></pre></td></tr></table></figure><ul><li><p>cswch</p><p>  每秒自愿上下文切换(voluntary context switch)的次数</p><p>  指进程<strong>无法获取资源</strong>导致的上下文切换. 例如, I/O, 内存等资源不足就会发生上下文切换. </p></li></ul><ul><li><p>nvcswch</p><p>  每秒非自愿上下文切换(non voluntary context switch)的次数 </p><p>  只进程由于<strong>时间片耗完</strong>导致被系统强制调度,进而发生的上下切换. 比如有大量的进程都在争抢CPU时, 就会发生非自愿上下文切换.  </p></li></ul><h3 id="使用Sysbench模拟多线程调度-查看上下文切换情况"><a href="#使用Sysbench模拟多线程调度-查看上下文切换情况" class="headerlink" title="使用Sysbench模拟多线程调度,查看上下文切换情况"></a>使用Sysbench模拟多线程调度,查看上下文切换情况</h3><p>在空闲时使用vmstata查看一系统的上下文切换次数</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">$</span> <span class="hljs-comment">vmstat</span> <span class="hljs-comment">1</span> <span class="hljs-comment">1</span><br><span class="hljs-comment">procs</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">memory</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span> --<span class="hljs-literal">-</span><span class="hljs-comment">swap</span>-- --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">io</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-literal">-</span><span class="hljs-comment">system</span>-- --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">cpu</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br> <span class="hljs-comment">r</span>  <span class="hljs-comment">b</span>   <span class="hljs-comment">swpd</span>   <span class="hljs-comment">free</span>   <span class="hljs-comment">buff</span>  <span class="hljs-comment">cache</span>   <span class="hljs-comment">si</span>   <span class="hljs-comment">so</span>    <span class="hljs-comment">bi</span>    <span class="hljs-comment">bo</span>   <span class="hljs-comment">in</span>   <span class="hljs-comment">cs</span> <span class="hljs-comment">us</span> <span class="hljs-comment">sy</span> <span class="hljs-comment">id</span> <span class="hljs-comment">wa</span> <span class="hljs-comment">st</span><br><span class="hljs-comment"></span> <span class="hljs-comment">0</span>  <span class="hljs-comment">0</span>      <span class="hljs-comment">0</span> <span class="hljs-comment">3757404</span> <span class="hljs-comment">310244</span> <span class="hljs-comment">2924480</span>    <span class="hljs-comment">0</span>    <span class="hljs-comment">0</span>     <span class="hljs-comment">0</span>     <span class="hljs-comment">1</span>    <span class="hljs-comment">6</span>    <span class="hljs-comment">6</span>  <span class="hljs-comment">0</span>  <span class="hljs-comment">0</span> <span class="hljs-comment">100</span>  <span class="hljs-comment">0</span>  <span class="hljs-comment">0</span><br></code></pre></td></tr></table></figure><ol><li><p>在第一个终端模拟多线程调度瓶颈</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysbench --threads=10 --max-time=300 threads run <br><br></code></pre></td></tr></table></figure></li><li><p>在第二个终端运行vmstat 观察上下文切换情况</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPU使用率过高</title>
    <link href="/2021/03/08/Linux/2019-05-20-CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98/"/>
    <url>/2021/03/08/Linux/2019-05-20-CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98/</url>
    
    <content type="html"><![CDATA[<h2 id="cpu使用率"><a href="#cpu使用率" class="headerlink" title="cpu使用率"></a>cpu使用率</h2><p>通常使用linux自带的工具<code>top,ps</code>来查看CPU的使用率</p><h3 id="什么是CPU的使用率"><a href="#什么是CPU的使用率" class="headerlink" title="什么是CPU的使用率?"></a>什么是CPU的使用率?</h3><p>linux系统是一个多任务系统, 系统将CPU划分成很短的时间片,通过调度器分配给各个任务使用,造成多任务运行的错觉. </p><p>为了维护CPU的时间片, Linux系统事前定义了节拍率,在内核中使用HZ表示, 使用全局变量Jiffies来记录开机以来的节拍率. 每发生一次中断, 值加一. </p><p>CPU使用率,除了空闲时间外其他时间占总CPU的时间百分比, 用公式表示:</p><p><img src="../../image/Linux/CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E5%85%AC%E5%BC%8F1.png" alt="img"></p><p>事实上为了计算CPU使用率. 性能工具一般都会隔一段时间取两个值,做差后计算这段时间的平均CPU使用率:</p><p><img src="../../image/Linux/CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E5%85%AC%E5%BC%8F2.png" alt="img"></p><p>如何查看CPU的使用率?</p><ul><li>top 显示了总体CPU和内存的使用情况. 已经各个进程的资源的使用情况</li><li>ps则只显示了每个进程的资源使用情况</li></ul><p>top的输出:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs tap">top - 15:28:47 up<span class="hljs-number"> 32 </span>min, <span class="hljs-number"> 2 </span>users,  load average: 0.00, 0.01, 0.02<br>Tasks:<span class="hljs-number"> 115 </span>total,  <span class="hljs-number"> 1 </span>running,<span class="hljs-number"> 114 </span>sleeping,  <span class="hljs-number"> 0 </span>stopped,  <span class="hljs-number"> 0 </span>zombie<br>%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st<br>KiB Mem : <span class="hljs-number"> 7992344 </span>total, <span class="hljs-number"> 7655884 </span>free,  <span class="hljs-number"> 152312 </span>used,  <span class="hljs-number"> 184148 </span>buff/cache<br>KiB Swap: <span class="hljs-number"> 4063228 </span>total, <span class="hljs-number"> 4063228 </span>free,       <span class="hljs-number"> 0 </span>used. <span class="hljs-number"> 7584852 </span>avail Mem <br><br>   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND   <br> <span class="hljs-number"> 1599 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span><span class="hljs-number"> 161952 </span> <span class="hljs-number"> 2208 </span> <span class="hljs-number"> 1556 </span>R   0.3  0.0   0:00.02 top       <br>    <span class="hljs-number"> 1 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span><span class="hljs-number"> 128008 </span> <span class="hljs-number"> 6572 </span> <span class="hljs-number"> 4152 </span>S   0.0  0.1   0:01.53 systemd   <br>    <span class="hljs-number"> 2 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.01 kthreadd  <br>    <span class="hljs-number"> 3 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.04 ksoftirqd+<br>    <span class="hljs-number"> 5 </span>root      <span class="hljs-number"> 0 </span>-20      <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 kworker/0+<br>    <span class="hljs-number"> 6 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.05 kworker/u+<br>    <span class="hljs-number"> 7 </span>root      rt  <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 migration+<br>    <span class="hljs-number"> 8 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 rcu_bh    <br>    <span class="hljs-number"> 9 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.26 rcu_sched <br>   <span class="hljs-number"> 10 </span>root      <span class="hljs-number"> 0 </span>-20      <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 lru-add-d+<br>   <span class="hljs-number"> 11 </span>root      rt  <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 watchdog/0<br>   <span class="hljs-number"> 12 </span>root      rt  <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 watchdog/1<br>   <span class="hljs-number"> 13 </span>root      rt  <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.02 migration+<br>   <span class="hljs-number"> 14 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.01 ksoftirqd+<br>   <span class="hljs-number"> 16 </span>root      <span class="hljs-number"> 0 </span>-20      <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 kworker/1+<br>   <span class="hljs-number"> 18 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 kdevtmpfs <br>   <span class="hljs-number"> 19 </span>root      <span class="hljs-number"> 0 </span>-20      <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S   0.0  0.0   0:00.00 netns  <br></code></pre></td></tr></table></figure><p>第三行为CPU的使用率的输出:</p><ul><li><p>user (缩写为us) 代表用户态CPU时间, 不包含nice时间,但是包含guest的时间</p></li><li><p>system(缩写为sys) 代表内核态CPU时间</p></li><li><p>nice(缩写为ni) 代表低优先级用户态CPU时间,</p></li><li><p>idle(缩写为id) 代表空闲时间.  不包括I/O的时间</p></li><li><p>iowait(缩写为wa) 代表等待I/O的CPU时间</p></li><li><p>irq(缩写为hi) 代表处理硬中断的时间 </p></li><li><p>softtirq(缩写为si) 代表处理软中断的CPU时间</p></li><li><p>steal(缩写为st) 代表当系统运行在虚拟机中的时候,被其他虚拟机中的CPU时间.</p></li></ul><p>按数字1 可以切到每个CPU的使用率. </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">top - <span class="hljs-number">15</span>:<span class="hljs-number">42</span>:<span class="hljs-number">45</span> <span class="hljs-keyword">up</span> <span class="hljs-number">46</span> <span class="hljs-built_in">min</span>,  <span class="hljs-number">2</span> users,  load average: <span class="hljs-number">0.00</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.02</span><br>Task<span class="hljs-variable">s:</span> <span class="hljs-number">115</span> total,   <span class="hljs-number">1</span> running, <span class="hljs-number">114</span> sleeping,   <span class="hljs-number">0</span> stopped,   <span class="hljs-number">0</span> zombie<br>%Cpu0  :  <span class="hljs-number">0.0</span> us,  <span class="hljs-number">0.3</span> <span class="hljs-keyword">sy</span>,  <span class="hljs-number">0.0</span> ni, <span class="hljs-number">99.7</span> id,  <span class="hljs-number">0.0</span> <span class="hljs-keyword">wa</span>,  <span class="hljs-number">0.0</span> <span class="hljs-keyword">hi</span>,  <span class="hljs-number">0.0</span> si,  <span class="hljs-number">0.0</span> <span class="hljs-keyword">st</span><br>%Cpu1  :  <span class="hljs-number">0.0</span> us,  <span class="hljs-number">0.0</span> <span class="hljs-keyword">sy</span>,  <span class="hljs-number">0.0</span> ni,<span class="hljs-number">100.0</span> id,  <span class="hljs-number">0.0</span> <span class="hljs-keyword">wa</span>,  <span class="hljs-number">0.0</span> <span class="hljs-keyword">hi</span>,  <span class="hljs-number">0.0</span> si,  <span class="hljs-number">0.0</span> <span class="hljs-keyword">st</span><br></code></pre></td></tr></table></figure><p>每个进程都一个%CPU的列, 代表进程CPU的使用率, 打算用户态和内核态CPU使用率的总和:</p><ul><li><p>包括进程的用户空间使用的CPU</p></li><li><p>通过系统调用的内核CPU</p></li><li><p>就绪队列运行CPU</p></li><li><p>在虚拟环境下,还包含虚拟机占用的CPU </p></li></ul><p>在top的输出结果中没有细分进程的用户态CPU和内核态CPU, 如果想要查看进程的详情情况,使用pidstat</p><p>使用<code>pidstat</code>每间隔1秒暂时进程的5组CPU使用率:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@localhost</span> ~]# pidstat <span class="hljs-number">1</span> <span class="hljs-number">5</span><br>Linux <span class="hljs-number">3.10</span>.<span class="hljs-number">0</span><span class="hljs-number">-862</span>.el<span class="hljs-number">7</span>.<span class="hljs-keyword">x</span><span class="hljs-number">86</span>_<span class="hljs-number">64</span> (localhost.localdomain) <span class="hljs-number">06</span>/<span class="hljs-number">15</span>/<span class="hljs-number">2019</span> _x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>_(<span class="hljs-number">2</span> CPU)<br><br><span class="hljs-number">05</span>:<span class="hljs-number">27</span>:<span class="hljs-number">30</span> PM   UID       PID    <span class="hljs-variable">%usr</span> <span class="hljs-variable">%system</span>  <span class="hljs-variable">%guest</span>    <span class="hljs-variable">%CPU</span>   CPU  Command<br><br><span class="hljs-number">05</span>:<span class="hljs-number">27</span>:<span class="hljs-number">31</span> PM   UID       PID    <span class="hljs-variable">%usr</span> <span class="hljs-variable">%system</span>  <span class="hljs-variable">%guest</span>    <span class="hljs-variable">%CPU</span>   CPU  Command<br><br><span class="hljs-number">05</span>:<span class="hljs-number">27</span>:<span class="hljs-number">32</span> PM   UID       PID    <span class="hljs-variable">%usr</span> <span class="hljs-variable">%system</span>  <span class="hljs-variable">%guest</span>    <span class="hljs-variable">%CPU</span>   CPU  Command<br><span class="hljs-number">05</span>:<span class="hljs-number">27</span>:<span class="hljs-number">33</span> PM     <span class="hljs-number">0</span>      <span class="hljs-number">2585</span>    <span class="hljs-number">0.99</span>    <span class="hljs-number">0.00</span>    <span class="hljs-number">0.00</span>    <span class="hljs-number">0.99</span>     <span class="hljs-number">0</span>  pidstat<br><br><span class="hljs-number">05</span>:<span class="hljs-number">27</span>:<span class="hljs-number">33</span> PM   UID       PID    <span class="hljs-variable">%usr</span> <span class="hljs-variable">%system</span>  <span class="hljs-variable">%guest</span>    <span class="hljs-variable">%CPU</span>   CPU  Command<br><span class="hljs-number">05</span>:<span class="hljs-number">27</span>:<span class="hljs-number">34</span> PM     <span class="hljs-number">0</span>      <span class="hljs-number">2585</span>    <span class="hljs-number">0.00</span>    <span class="hljs-number">1.00</span>    <span class="hljs-number">0.00</span>    <span class="hljs-number">1.00</span>     <span class="hljs-number">0</span>  pidstat<br><br><span class="hljs-number">05</span>:<span class="hljs-number">27</span>:<span class="hljs-number">34</span> PM   UID       PID    <span class="hljs-variable">%usr</span> <span class="hljs-variable">%system</span>  <span class="hljs-variable">%guest</span>    <span class="hljs-variable">%CPU</span>   CPU  Command<br><br>Average:      UID       PID    <span class="hljs-variable">%usr</span> <span class="hljs-variable">%system</span>  <span class="hljs-variable">%guest</span>    <span class="hljs-variable">%CPU</span>   CPU  Command<br>Average:        <span class="hljs-number">0</span>      <span class="hljs-number">2585</span>    <span class="hljs-number">0.20</span>    <span class="hljs-number">0.20</span>    <span class="hljs-number">0.00</span>    <span class="hljs-number">0.40</span>     -  pidstat<br></code></pre></td></tr></table></figure><ul><li>%usr 用户态CPU使用率</li><li>%system 内核态CPU使用率</li><li>%guest 运行虚拟机CPU使用率 </li><li>%wait 等待CPU使用率</li><li>%CPU 总的CPU使用率 </li></ul><p>最后Average部分,计算了5组数据的平均值</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
